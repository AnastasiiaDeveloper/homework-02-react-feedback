{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","good","neutral","bad","this","total","countTotalFeedback","percentage","toFixed","title","options","onLeaveFeedback","setState","Statistics","positivePercentage","countPositiveFeedbackPercentage","Component","props","FeedbackOptions","map","option","onClick","NotificationMessage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAGMA,G,wDACJ,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,KAAM,EACNC,QAAS,EACTC,IAAK,GANK,E,iEAWZ,OAAOC,KAAKJ,MAAMC,KAAOG,KAAKJ,MAAME,QAAUE,KAAKJ,MAAMG,M,wDAIzD,IAAME,EAAQD,KAAKE,qBACbC,EAAaH,KAAKJ,MAAMC,KAAOI,EACrC,MAAM,GAAN,OAAWE,EAAWC,QAAQ,GAA9B,O,+BAGQ,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEC,MAAM,wBACNC,QACE,CACE,CAAED,MAAO,OAAQE,gBAAiB,kBAAM,EAAKC,SAAS,CAAEX,KAAM,EAAKD,MAAMC,KAAO,MAChF,CAAEQ,MAAO,UAAWE,gBAAiB,kBAAM,EAAKC,SAAS,CAAEV,QAAS,EAAKF,MAAME,QAAU,MACzF,CAAEO,MAAO,MAAOE,gBAAiB,kBAAM,EAAKC,SAAS,CAAET,IAAK,EAAKH,MAAMG,IAAM,SAGnF,kBAACU,EAAD,CACEZ,KAAMG,KAAKJ,MAAMC,KACjBC,QAASE,KAAKJ,MAAME,QACpBC,IAAKC,KAAKJ,MAAMG,IAChBE,MAAOD,KAAKE,qBACZQ,mBAAoBV,KAAKW,yC,GAtCjBC,cA6ClB,SAASH,EAAWI,GAClB,OACE,6BACE,yCACA,kBAAC,EAAD,CACER,MAAM,oBACNR,KAAMgB,EAAMhB,KACZC,QAASe,EAAMf,QACfC,IAAKc,EAAMd,IACXE,MAAOY,EAAMZ,MACbS,mBAAoBG,EAAMH,sBAMlC,IAAMI,EAAkB,SAAAD,GAAK,OAEzB,6BACE,2BAAIA,EAAMR,OACTQ,EAAMP,QAAQS,KAAI,SAAAC,GAAM,OAAI,4BAAQC,QAASD,EAAOT,iBAAkBS,EAAOX,YAK7Ea,EAAsB,SAAAL,GAAK,OAE9B,8BAEoB,IAAhBA,EAAMZ,MACJ,8BAAOY,EAAMR,OACb,6BACE,uCAAaQ,EAAMhB,MACnB,0CAAgBgB,EAAMf,SACtB,sCAAYe,EAAMd,KAClB,wCAAcc,EAAMZ,OACpB,oDAA0BY,EAAMH,uBAO7Bf,IC/EKwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0465feaf.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    }\n  }\n\n  countTotalFeedback() {\n    return this.state.good + this.state.neutral + this.state.bad\n  }\n\n  countPositiveFeedbackPercentage() {\n    const total = this.countTotalFeedback()\n    const percentage = this.state.good / total\n    return  `${percentage.toFixed(2)}%`\n  }\n  \n  render() {\n    return (\n      <div>\n        <FeedbackOptions\n          title=\"Please leave feedback\"\n          options={\n            [\n              { title: 'Good', onLeaveFeedback: () => this.setState({ good: this.state.good + 1 }) },\n              { title: 'Neutral', onLeaveFeedback: () => this.setState({ neutral: this.state.neutral + 1 }) },\n              { title: 'Bad', onLeaveFeedback: () => this.setState({ bad: this.state.bad + 1 }) },\n            ]}\n        />\n        <Statistics\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n          total={this.countTotalFeedback()}\n          positivePercentage={this.countPositiveFeedbackPercentage()}\n        />\n      </div>\n    )\n  }\n}\n\nfunction Statistics(props) {\n  return (\n    <div>\n      <p>Statistics</p>\n      <NotificationMessage\n        title=\"No feedback given\"\n        good={props.good}\n        neutral={props.neutral}\n        bad={props.bad}\n        total={props.total}\n        positivePercentage={props.positivePercentage}\n      />\n    </div>\n  )\n}\n\nconst FeedbackOptions = props => \n  (\n    <div>\n      <p>{props.title}</p>\n      {props.options.map(option => <button onClick={option.onLeaveFeedback}>{option.title}</button>)}\n    </div>\n  )\n\n\n const NotificationMessage = props => \n  (\n    <span>\n      {\n        props.total === 0 ?\n          <span>{props.title}</span> :\n          <div>\n            <span>Good: {props.good}</span>\n            <span>Neutral: {props.neutral}</span>\n            <span>Bad: {props.bad}</span>\n            <span>Total: {props.total}</span>\n            <span>Positive feedback: {props.positivePercentage}</span>\n          </div>\n      }\n    </span>\n  )\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister()"],"sourceRoot":""}